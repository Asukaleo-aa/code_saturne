#!/bin/sh
#============================================================================
#
#                    Code_Saturne version 1.3
#                    ------------------------
#
#
#     This file is part of the Code_Saturne Kernel, element of the
#     Code_Saturne CFD tool.
#
#     Copyright (C) 1998-2008 EDF S.A., France
#
#     contact: saturne-support@edf.fr
#
#     The Code_Saturne Kernel is free software; you can redistribute it
#     and/or modify it under the terms of the GNU General Public License
#     as published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     The Code_Saturne Kernel is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with the Code_Saturne Kernel; if not, write to the
#     Free Software Foundation, Inc.,
#     51 Franklin St, Fifth Floor,
#     Boston, MA  02110-1301  USA
#
#============================================================================
#

 usage() {
    echo    
    echo "   Script for determination of compiler versions                   "
    echo    
    echo " Usage: $0 [-cshome <CS_HOME>] [-nomarch <NOM_ARCH>] [-output <compil.log>]"
    echo    
    echo "      with:"
    echo "      <CS_HOME>    : Code_Saturne CS_HOME variable"
    echo "                     may have already been set by the environment"
    echo "      <NOM_ARCH>   : Code_Saturne architecture name"
    echo "                     may have already been set by the environment"
    echo "      <compil.log> : output file (give the full path)"
    echo "                     ./compil.log is the default"
    echo
    echo    
    exit
 }


# Working directory

 dirbase=`pwd`


# Parse the command line

 while [ "$#" != 0 ] ; do 
   case $1 in 
     -cshome)  shift ; CS_HOME="$1"    ; shift ;;
     -nomarch) shift ; NOM_ARCH="$1"   ; shift ;;
     -output)  shift ; compillog="$1"  ; shift ;;
     *) usage ;;
   esac
 done

# Is there a default file?

 if [ -z "${compillog}" ] ; then 
   compillog=${dirbase}/compil.log
 fi

echo $compillog

# CS_HOME version

 if [ -z ${CS_HOME} ] ; then 
   usage
   echo
   echo ' CS_HOME is not valid. Check .profile.' 
   echo
 fi

# NOM_ARCH check

 if [ -z ${NOM_ARCH} ] ; then 
   usage
   echo
   echo ' NOM_ARCH is not set. Check .profile.' 
   echo
 fi

# Start

 echo                                           >> ${compillog}
 echo ' Version of compilers used'              >> ${compillog}
 echo                                           >> ${compillog}

# FORTRAN compiler version
 
 echo ' '                                       >> ${compillog}
 echo ' ====================================== '>> ${compillog}
 echo ' '                                       >> ${compillog}
 echo ' FORTRAN Compiler    '                   >> ${compillog}
 echo ' '                                       >> ${compillog}

#   Tmpdir

 dir_compiler_f_version=dir_compiler_f_version
 mkdir ${dir_compiler_f_version} || exit 
 cd ${dir_compiler_f_version}                   >> ${compillog} 2>&1

#   A non empty FORTRAN file is generated 
#     - to fool the compiler
#     - to be able to run the case if any problem

 foof=foo.F
 echo '      program foo'                       >> ${foof}
 echo '      print*,"FORTRAN test program successfully ran "'   >> ${foof}
 echo '      end'                               >> ${foof}

# Compilation 

 ln -s ${CS_HOME}/bin/Makefile Makefile
 make compversion CS_HOME=${CS_HOME} NOM_ARCH=${NOM_ARCH} OPT="VERS" >> ${compillog} 2>&1

# Execution (if an executable has been generated)

 echo ' '                                       >> ${compillog}
 if [ -f cs13.exe ] ; then 
   ./cs13.exe                                   >> ${compillog} 2>&1
 else
   echo ' No FORTRAN test executable    '       >> ${compillog} 
 fi
 echo ' '                                       >> ${compillog}

# Back to the initial directory

 cd ${dirbase}

# Clean

 rm -rf ${dir_compiler_f_version}


# C compiler version

 echo ' '                                       >> ${compillog}
 echo ' ====================================== '>> ${compillog}
 echo ' '                                       >> ${compillog}
 echo ' C Compiler    '                         >> ${compillog}
 echo ' '                                       >> ${compillog}

# Tmpdir

dir_compiler_c_version=dir_compiler_c_version
mkdir ${dir_compiler_c_version} || exit 
cd ${dir_compiler_c_version}                    >> ${compillog} 2>&1

#   A non empty C file is generated 
#     - to fool the compiler
#     - to be able to run in case of problem

 fooc=foo.c
 echo '     int main()'                         >> ${fooc}
 echo '     {'                                  >> ${fooc}
 echo '     printf("C test program successfully ran");'>> ${fooc}
 echo '     return 0;'                          >> ${fooc}
 echo '     }'                                  >> ${fooc}
 
#   Compilation 

 ln -s ${CS_HOME}/bin/Makefile Makefile
 make compversion CS_HOME=${CS_HOME} NOM_ARCH=${NOM_ARCH} OPT="VERS" >> ${compillog} 2>&1

#   Execution 

 echo ' '                                       >> ${compillog}
 if [ -f cs13.exe ] ; then 
   ./cs13.exe                                   >> ${compillog} 2>&1
 echo ' '                                       >> ${compillog}
 else
   echo ' No C test executable    '             >> ${compillog} 
 fi
 echo ' '                                       >> ${compillog}

# Back to the initial directory

 cd ${dirbase}

# Clean

 rm -rf ${dir_compiler_c_version}
 
 echo ' ====================================== '>> ${compillog}
 echo ' '                                       >> ${compillog}


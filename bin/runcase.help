Setting runcase options
=======================
=======================

The user may choose not to use the preprocessor
  (only for meshes in .tlc or .slc format) by setting
  SOLCOM=1
otherwise set SOLCOM=0 as a standard
WARNING: .slc and .tlc formats are obsolete and their use is deprecated.

               -------------------------------

The variable COMMAND_REORIENT is used by the preprocessor to reorient cells and
faces in case of incorrect orientation.

    COMMAND_REORIENT="--reorient"

  If no correction is necessary, the variable COMMAND_REORIENT is left emtpy, as:

    COMMAND_REORIENT=

                -------------------------------

To join meshes with the preprocessor, additional options must be defined:
   - assign to the MESH variable the name of the meshes between " ".
   - assign to the COMMAND_JOIN variable the joining option. It is recommended
     to specify the color or group of the faces to be joined. If this can not
     be done, the options -color or -group should not be used (but the cost of
     the preprocessing will be higher and the process less robust). Selecting the
     faces can be performed by other means (see the preprocessor help by ecs -h).
  In the following example, the faces of color 3, 4 and 6 of the meshes
     titi.des and toto.unv are joined as:

    MESH="titi.des toto.unv"
    COMMAND_JOIN="-j --color 3 4 6"

  If no joining is necessary, the variable COMMAND_JOIN is left emtpy, as:

    COMMAND_JOIN=

               -------------------------------

when the Code_Saturne GUI is used, the user assigns the name of the
  xml file to the variable PARAM. The file should be placed in
  the directory DATA of the case.

               -------------------------------

The variable COMMAND_CWF is used to cut the faces whose warp angle is larger
  than a given tolerance (in degrees). For instance, if the tolerance
  angle is 0.01 degrees (default value), the command reads:

    COMMAND_CWF="--cwf 0.01"

  If the user wants to use the mesh as obtained by the mesh generator,
    COMMAND_CWF is left empty, as:

    COMMAND_CWF=

               -------------------------------

When periodicity applies, COMMAND_PERIO is used by the preprocessor,
  with the option --perio:

  Two types of periodicity are possible: translation and rotation.
    Translation : --perio --trans tx ty tz
      (tx,ty,tz): vector components
    Rotation    : two methods are possible
      - the angle, the direction and an invariant point are given:
        --perio --rota --angle a --dir dx dy dz --invpt px py pz
          a         : angle in degrees (between -180 and +180)
          (dx,dy,dz): rotation axis vector components
          (px,py,pz): rotation invariant point components
      - the matrix and an invariant point are given:
        --perio --rota --matrix m11 m12 m13 m21 m22 m23 m31 m32 m33 --invpt px py pz
          mij       : matrix elements (line by line)
          (px,py,pz): rotation invariant point components

  Translation and rotation can be used together:
        --perio --trans tx ty tz --rota --angle a
                                        --dir dx dy dz -invpt px py pz
     or --perio --trans tx ty tz --rota --matrix m11 m12 m13
                                                 m21 m22 m23
                                                 m31 m32 m33
                                        --invpt px py pz
    The result is RoT (whatever the order of the rotation and translation in
      the command line).

     Rotation and translation have to be consistant with each other.

  It is better to use the faces where periodicity applies, by using the
    property of these faces, with their color for instance (faces
    can be selected by other means than their color: see ecs -h for more
    details), for instance:
      --perio --trans 10 0 0 --color 1 2

  Up to 3 periodicity directions can be imposed (one per spacial direction),
    for example:
    --perio --trans 10 0 0 --perio --trans 0 1 0 --perio --trans 0 0 1

  If periodicity does not apply, COMMAND_PERIO is left empty as:

    COMMAND_PERIO=

  Example ("\" shows the continuation of the command line):

    COMMAND_PERIO="--perio --trans -10.2 0 0 --color 2                 \
                   --perio --rota --angle 90 --dir 0 0 1 --invpt 0 0 0 \
                           --color 3 4                                 \
                   --perio --trans 0 1 0                               \
                           --rota --matrix 1 0  0                      \
                                           0 0 -1                      \
                                           0 1  0 --invpt 0 0 -0.2"

               -------------------------------

If coupling with SYRTHES applies, (only one fluid simulation coupled
  with only one solid simulation), the necessary information is determined
  automatically by inspecting the user subroutines.

  For more complex (multiple) couplings, the script will have to be changed.

               -------------------------------

If thermochemistry applies, the name of the thermochemistry data file
  may be specified through THERMOCHEMISTRY_DATA. For example:
    THERMOCHEMISTRY_DATA="dp_FCP"

               -------------------------------

If meteo profiles are used, the name of the meteo data file
  may be specified through METEO_DATA. For example:
    METEO_DATA="meteo"

               -------------------------------


User input files can be specified with the USER_INPUT_FILE variable
  (left empty if none are used) and the files are located in DATA.

               -------------------------------

User output files to retrieve can be specified with USER_OUTPUT_FILE.

               -------------------------------

The NUMBER_OF_PROCESSORS option defines the number of MPI processes to use
  (ideally equal to the physical number of processors or cores, but this
  is not mandatory). If the variable is left empty, it is determined
  automatically (for PC's or workstations, NUMBER_OF_PROCESSORS is set to 1
  and for clusters or supercomputers, it is set to the number of processors
  reserved for the batch job).
  When running a calculation through a batch system, it is not recommended
  to force NUMBER_OF_PROCESSORS to a value different from the number of
  processors required for the batch job, as oversubscribing may lead to
  strongly degraded performance (and may even fail depending on the system's
  mpi policy), and under-subscribing means reserving unused processors.
  When running the script interactively (such as on a Linux PC),
  NUMBER_OF_PROCESSORS may be set to a lower value than the number of
  physical processors (to limit system load), or to a higher value
  (usually for testing, as this reduces performance).
  When coupling with SYRTHES using MPI, one process/processor is reserved
  for SYRTHES, so the number of processors used for the kernel is
  equal to nproc_kernel = NUMBER_OF_PROCESSORS - 1.


If we wish to specify distant machines (or are running on a cluster
  with no batch system), the optional PROCESSOR_LIST string may be defined.
  Running on multiple processors not reserved for this task is not recommended,
  as load imbalance due to 1 processor running multiple jobs is enough to
  degrade the performance for the whole job. Also, running in parallel without
  a high performance network will lead to low performance (low latency being
  even more important than high bandwidth).
  Two simple examples:
    PROCESSOR_LIST="machine1 cpu=nb_cpu1 user=userid1 & machine2 cpu=nb_cpu2 user=userid2"
    PROCESSOR_LIST="machine1 & machine2"
  The & separates 2 machines in the list. Fields are as follows:
    machine1 and machine2 indicate machine names (as given by the
      hostname command).
      for example: chi80xx.der.edf.fr
    nb_cpu1 and nb_cpu2 indicate the number of processors on hosts
      machine1 and machine2
      for example, on a dual-processor machine: cpu=2
    userid1 and userid2 indicate the user's login on  machine1 and machine2
  Fields cpu= and user= are optional.
  The machine from which the script is run will automatically be used with
  most MPI environments.
  Selected machines must use a shared filesystem (at least NFS) and all
  be of the same general OS and architecture type.

               -------------------------------

The CS_TMP_PREFIX variable allows the user to specify in which temporary
  directory the calculation will run. If left empty, a default directory
  will be used (architecture dependent). If a value is specified,
  the temporary directory will be:
    RUN=$CS_TMP_PREFIX/tmp_Saturne/$STUDY.$CASE.$DATE

Specifying CS_TMP_PREFIX may be useful for example on a workstation so
  as to use a large local disk (CS_TMP_PREFIX=/local00/users/`whoami`
  for example).
  Under some batch systems, the default of TMPDIR may be destroyed after
  each run, so to keep this temporary directory after the run,
  another value must be specified (CS_TMP_PREFIX=$SCRATCHDIR for example).

               -------------------------------

The EXEC_PREPROCESS, EXEC_PARTITION, and EXEC_KERNEL variables allow running
  only some specific stages of the calculation, and saving them for future use.
  if EXEC_KERNEL is set to no, the Preprocessor's preprocessor_output file
  is copied in RESU, and the Partitioner's output is copied in a
  PARTITION_OUTPUT directory in RESU. note also that when partitioning with no
  kernel execution, the number of processors required is not known in advance,
  so the PARTITION_LIST variable must be used to indicate which partitionings
  are required. For example, PARTITION_LIST="128 256" will generate
  2 partitionings, with files domain_number_128 and domain_number_256
  in RESU/PARTITION_OUTPUT. The option "-no-perio" may also be added to
  PARTITION_LIST if we do not want periodicity to be accounted for in the
  connectivity graph.
  If EXEC_PREPROCESS is set to no, a preprocessor_output file must be found in
  DATA (typically, a symbolic link to a file in RESU).
  If EXEC_PARTITION is set to no, a PARTITION_OUTPUT directory must be found
  in DATA (typically, a symbolic link to a file in RESU). If no partitioning
  is found, the calculation will continue, using an unoptimized partitioning,
  which may impact performance.

               -------------------------------

Option CS_LIB_ADD is more advanced, mainly for developers.

  CS_LIB_ADD allows specifying external libraries to link. In this
    case, the whole option to pass to the linker must be given.
    For example:
    CS_LIB_ADD="-L/home/saturne/opt/foo/lib -lfoo"

  VALGRIND enables running of the Kernel through Valgrind if this
    memory-checking tool is available (usually under Linux) To
    activate it:
      VALGRIND=valgrind
    possibly with specific options, such as for example
      VALGRIND="valgrind --tool=memcheck"
    If valgrind is not in the PATH, its full path must be specified.

  ARG_CS_VERIF allows activation of elementary mesh quality tests,
    as well as basic linear algebra operations micro-benchmarks.
    ="-q" : mesh quality criteria and test precision of gradient for
            sin(x+2y+3z) with each calculation mode (IMRGRA from 0 to 4)
    ="--benchmark": basic linear algebra operation benchmark
    ="--benchmark --mpitrace" : same as benchmark, with operations run
                                only once, for use with MPI trace tools.
    In mesh quality or benchmark mode, no parameter file or user
    subroutine is needed.

  ARG_CS_OUTPUT allows redirection of output.
    The "--log" option allows redirecting output for a single-processor
    run or for rank 0 of a parallel run.
    "--log 0" output redirected to standard output
    "--log 1" output redirected to a "listing" file (default behavior)
    The "--logp" option allows redirection of output for ranks 1 to n-1
    for a parallel run on n processors:
    "--logp -1" turns off output for ranks > 0 (default behavior)
    "--logp 0" sends all output to the standard output (useful if every
      rank is associated to a different console, such as when running
      under a debugger).
    "--logp 1" redirects all output from ranks 1 to n-1 to files
      listing_n0002 to listing_n<N>.
    Options --log and --logp may be specified together or separately
    through the ARG_CS_OUTPUT variable.

  ECHO_SYR_COMM allows for echo of communications on the SYRTHES 3 side.
    This is only useful when debugging a coupled calculation.
    To activate this options, assign a strictly positive value to
    ECHO_SYR_COMM. For each message exchanged, the ECHO_SYR_COMM first
    and last values will be printed (characters, integers, or doubles).
    By default, the string is kept empty.
    Reasonable activation value:
      ECHO_SYR_COMM="10"


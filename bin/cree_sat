#!/bin/sh
#============================================================================
#
#                    Code_Saturne version 1.3
#                    ------------------------
#
#
#     This file is part of the Code_Saturne Kernel, element of the
#     Code_Saturne CFD tool.
#
#     Copyright (C) 1998-2008 EDF S.A., France
#
#     contact: saturne-support@edf.fr
#
#     The Code_Saturne Kernel is free software; you can redistribute it
#     and/or modify it under the terms of the GNU General Public License
#     as published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     The Code_Saturne Kernel is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with the Code_Saturne Kernel; if not, write to the
#     Free Software Foundation, Inc.,
#     51 Franklin St, Fifth Floor,
#     Boston, MA  02110-1301  USA
#
#============================================================================
#
#=================================================
#     Script to generate a Code_Saturne study
#=================================================
         
usage() {
    echo
    echo "   syntax: cree_sat -etude nom_etude [nom_cas1 nom_cas2 ...][-noihm]"
    echo "               For a full study"
    echo "           cree_sat -cas nom_cas1 nom_cas2 ...[-noihm]"
    echo "               For a cases created for an existing study"
    echo "           cree_sat -noihm"
    echo "               To force non GUI "
    echo "              (The option -noihm has to be used only once at the beginning"
    echo "                   or at the end the option list)"
    echo 
    echo "           cree_sat -h for help or:"
    echo "            xpdf ${DOC_UTILISATION}"
    echo; exit
}


enleve_test() {
NTEST=0
NTEST=`grep -c TEST_A_ENLEVER_POUR_UTILISER_LE_SOUS_PROGRAMME_DEBUT $1`
while [ $NTEST -gt 0 ] ; do
  NDEB=`grep -n TEST_A_ENLEVER_POUR_UTILISER_LE_SOUS_PROGRAMME_DEBUT $1 \
    | head -1 | awk -F: '{print $1}'`
  if [ "$NDEB" != "" ]; then
    NFIN=`grep -n TEST_A_ENLEVER_POUR_UTILISER_LE_SOUS_PROGRAMME_FIN $1 \
    | head -1 | awk -F: '{print $1}'`
    sed "${NDEB},${NFIN}d" $1 > ${1}.tmp
    mv ${1}.tmp $1
  fi
  NTEST=`grep -c TEST_A_ENLEVER_POUR_UTILISER_LE_SOUS_PROGRAMME_DEBUT $1`
done
}

comment_example() {
NTEST=0
NTEST=`grep -c CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_DEBUT $1`
while [ $NTEST -gt 0 ] ; do
  NDEB=`grep -n CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_DEBUT $1 \
    | head -1 | awk -F: '{print $1}'`
  if [ "$NDEB" != "" ]; then
    NFIN=`grep -n CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_FIN $1 \
    | head -1 | awk -F: '{print $1}'`
#   veiller a modifier la chaine recherchee, sinon on boucle a l'infini
    sed "${NDEB}s/DEBUT/debut/" $1 > ${1}.tmp
    mv ${1}.tmp $1
    sed "${NFIN}s/FIN/fin/" $1 > ${1}.tmp
    mv ${1}.tmp $1
    sed "${NDEB},${NFIN}s/^/Cex/" $1 > ${1}.tmp
    mv ${1}.tmp $1
  fi
  NTEST=`grep -c CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_DEBUT $1`
done
}

remove_comment() {
NTEST=0
NTEST=`grep -c CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_DEBUT $1`
if [ $NTEST -gt 0 ]
then
  DEB=CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_DEBUT
  FIN=CODE_FOURNI_COMME_EXEMPLE_A_ADAPTER_PAR_L_UTILISATEUR_FIN
  sed "/${DEB}/d" $1 > ${1}.tmp
  mv ${1}.tmp $1
  sed "/${FIN}/d" $1 > ${1}.tmp
  mv ${1}.tmp $1
fi
}

create_study() {
STUDY="$1"
if [ -d "$STUDY" ]; then
   echo "$STUDY already exists"
   exit
fi
mkdir $STUDY
mkdir ${STUDY}/MAILLAGE
mkdir ${STUDY}/POST
study=`echo $STUDY |tr "[:upper:]" "[:lower:]"`
}


cree_case() {
GUI=$1
shift
STUDY=$1
shift
REPBASE=`pwd`
for i in $*
do
  CASE="${i}"
  CASE=`echo $CASE | tr "[:lower:]" "[:upper:]"`
  REPBASECASE=$REPBASE/$CASE
  echo; echo "Generating case $CASE ..."
  if [ -d "$CASE" -o -f "$CASE" ]; then
     echo "$CASE already exists"
     continue
  fi
  study=`echo $STUDY |tr "[:upper:]" "[:lower:]"`
  case=`echo $CASE |tr "[:upper:]" "[:lower:]"`

  mkdir ${CASE}
  mkdir ${CASE}/DATA
  mkdir ${CASE}/FORT
  mkdir ${CASE}/RESU
  mkdir ${CASE}/SCRIPTS

# Get CS_HOME
  FICCSHOMEBKSLH=$CASE/SCRIPTS/.cshomebkslh
  echo $CS_HOME | sed -e "s/\//\\\\\//g" > $FICCSHOMEBKSLH
  CSHOMEBCKSLH=`cat $FICCSHOMEBKSLH`
  rm $FICCSHOMEBKSLH

# Get CSGUI_HOME
  FICCSGUIHOMEBKSLH=$CASE/SCRIPTS/.csguihomebkslh
  echo $CSGUI_HOME | sed -e "s/\//\\\\\//g" > $FICCSGUIHOMEBKSLH
  CSGUIHOMEBCKSLH=`cat $FICCSGUIHOMEBKSLH`
  rm $FICCSGUIHOMEBKSLH

# Copy data (only that which is useful)
  thch=THCH
  mkdir ${CASE}/DATA/$thch
  for var in dp_C3P dp_C3PSJ dp_ELE dp_FCP ; do
    cp -f $CS_HOME/data/thch/$var $CASE/DATA/$thch/.
  done

  gui=SaturneGUI
  if [ "$GUI" = "gui" ] ; then
    cp -f $SCRIPT_HOME/$gui ${CASE}/DATA/.
    sed "s/NOMCSGUIHOME/$CSGUIHOMEBCKSLH/g"  $CASE/DATA/$gui  >case.tmp
    mv -f case.tmp $CASE/DATA/$gui
    chmod +x $CASE/DATA/$gui
  fi

# Copy user source files and remove SVN directories
  users=USERS
  cp -Rf $CS_HOME/users $CASE/FORT/$users
  find $CASE/FORT/$users -name .svn -print0 | xargs -0r \rm -r

# On some batch sytems, the name is limited to 15 characters
  NOMETCAS=`echo ${study}${case}|cut -c1-15`

  cp -f $SCRIPT_HOME/lance         $CAS/SCRIPTS
  cp -f $SCRIPT_HOME/lance.help    $CAS/SCRIPTS
  FICREPBASECASBKSLH=$CAS/SCRIPTS/.repbasecasbkslh
  echo $REPBASECAS | sed -e "s/\//\\\\\//g" > $FICREPBASECASBKSLH
  REPBASECASBCKSLH=`cat $FICREPBASECASBKSLH`
  rm $FICREPBASECASBKSLH
  sed -e "s/nometcas/$NOMETCAS/g" \
      -e "s/NOMET/$STUDY/g" \
      -e "s/NOMCAS/$CASE/g" \
      -e "s/NOMREPBASE/$REPBASECASBCKSLH/g" \
      -e "s/NOMCSHOME/$CSHOMEBCKSLH/g" \
      -e "s/nomet/${study}/g"  $CASE/SCRIPTS/lance >case.tmp
  mv case.tmp $CASE/SCRIPTS/lance

  for fich in $CASE/FORT/$users/*/*.[F]
  do 
    if [ -f $fich ] ; then
      if [ "$GUI" = "gui" ] ; then 
        comment_example $fich
      else
        remove_comment $fich
      fi
    fi
  done
  for fich in $CASE/FORT/$users/*/*.[F,c] $CASE/SCRIPTS/lance
  do
    if [ -f $fich ] ; then
      enleve_test $fich
    fi
  done
  chmod +x $CASE/SCRIPTS/lance
  echo "Case $CAS created."
done
exit
}


#===  MAIN ===

clear
echo "================================================================="
echo "             Code_Saturne study/case generation"
echo "                        version 1.3                              "
echo "================================================================="
echo

if [ -z "$CS_HOME" ]; then
  echo
  tput bold ;
  echo " WARNING: CS_HOME is not set."
  tput rmso ; tput sgr0
  echo " Session terminated"; echo
  exit
fi

USER=`whoami`
SCRIPT_HOME=$CS_HOME/bin
FICHE_HOME=$CS_HOME/doc/FICHE
DOC_UTILISATION=$CS_HOME/doc/UTILISATION/saturne.pdf

NNOGUI=0
for i in $*
do
  if [ "${i}" = "-noihm" ]
  then
     NNOGUI=`echo $NNOGUI |awk '{printf($1+1)}' `
  fi
done
if [ $NNOGUI -eq 1 ]
then 
  FIRST=$1
  LAST=`echo $* | awk '{print $NF}'`
  if [ "$FIRST" != "-noihm" -a "$LAST" != "-noihm" ]
  then 
    usage
  else
    GUI=nogui
  fi  
elif [ $NNOGUI -eq 0 ]
then
  GUI=gui
else
  usage 
fi

if [ "$1" = "-noihm" ]
then
  shift
fi

TYPE=""
case $1 in
  -etude) TYPE="study";shift;;
  -cas) TYPE="case";shift;;
  *) usage;;
esac

if [ $# = 0 -o "$1" = "-noihm" ]
then
  usage
fi

if [ $TYPE = "study" ]
then
  STUDY=$1
  shift
  STUDY=`echo $STUDY |tr "[:lower:]" "[:upper:]"`
  create_study $STUDY
  cd $STUDY
else
  STUDY=`basename ${PWD}`
fi

if [ $# = 0 -o "$1" = "-noihm" ]
then
  CASE="CAS1"
else  
  CASE=""
  for i in $*
  do
    if [ "${i}" = "-noihm" ]
    then
       continue
    else
      CASE="$CASE ${i}"
    fi
  done
fi

create_case $GUI $STUDY $CASE

exit




